generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Type {
  Bait
  Control
  Corpse
  Defense
  Drill
  Interception
  Neutral
  Offense
  Okizeme
  Serve
}

// model Type {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name String
//   game        Game        @relation(fields: [gameId], references: [id])
//   gameId      String
// }

enum Speed {
  All
  High
  Low
  Mid
}

// model Speed {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name String
//   game        Game        @relation(fields: [gameId], references: [id])
//   gameId      String
// }

enum Environment {
  Match
  Training
}

// model Environment {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name String
//   game        Game        @relation(fields: [gameId], references: [id])
//   gameId      String
// }

enum Character {
  All
  Candyman
  Dice
  Doombox
  Dust
  Grid
  Jet
  Latch
  Nitro
  Raptor
  Switch
  Sonata
  Toxic
}

// model Character {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name String
//   game        Game        @relation(fields: [gameId], references: [id])
//   gameId      String
// }

enum Stage {
  All
  Desert
  District
  Factory
  Field
  Outskirts
  Pool
  Room
  Sewers
  Streets
  Subway
}

// model Stage {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name String
//   game        Game        @relation(fields: [gameId], references: [id])
//   gameId      String
// }

model Bookmark {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  play      Play     @relation(fields: [playId], references: [id])
  playId    String
  createdAt DateTime @default(now())

  @@id([userId, playId])
  @@index([userId])
  @@index([playId])
}

model Star {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  play      Play     @relation(fields: [playId], references: [id])
  playId    String
  createdAt DateTime @default(now())

  @@id([userId, playId])
  @@index([userId])
  @@index([playId])
}

model Game {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  abbreviation String   @unique
  plays        Play[]
  // stages    Stage[]
  // characters Character[]
  // environments Environment[]
  // speeds Speed[]
  // types Type[]
}

model Play {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  approved      Boolean     @default(false)
  archived      Boolean     @default(false)
  userId        String
  name          String
  videoUrl      String
  thumbnailUrl  String?
  description   String?      @db.VarChar(300)
  type          Type
  speed         Speed
  environment   Environment
  character     Character
  stage         Stage
  difficulty    Int
  user          User        @relation(fields: [userId], references: [id])
  bookmarks     Bookmark[]
  stars         Star[]
  game          Game       @relation(fields: [gameId], references: [id])
  gameId        String

  @@index([userId])
  @@index([gameId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  CONTRIBUTOR
  MODERATOR
  ADMIN
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  banned        Boolean    @default(false)
  accounts      Account[]
  sessions      Session[]
  plays         Play[]
  bookmarks     Bookmark[]
  stars         Star[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
